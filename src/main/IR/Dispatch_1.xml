<Module type="Dispatch">
	<Parameters>
		<Parameter name="Issue0_function_type" type="3'b010" value="" description="ISSUE0 only support CSR"/>	
		<Parameter name="Issue1_function_type1" type="3'b011" value="" description="ISSUE1 support LDU"/>
		<Parameter name="Issue1_function_type2" type="3'b100" value="" description="ISSUE1 support STU"/>
		<Parameter name="Issue2_function_type1" type="3'b000" value="" description="ISSUE2 support ALU"/>
		<Parameter name="Issue2_function_type2" type="3'b001" value="" description="ISSUE2 support BRU"/>	
	</Parameters>
	<Interface>
	        <!-- Interfaces for each Functional Unit -->
	        <Input name="DispatchCount" type="[1:0]" description="The number of instructions that can be issued"/>
	        <Input name="insn1" type="[127:0]" description="insn entry taken from decode_queue"/>
	        <Input name="insn2" type="[127:0]" description="insn entry taken from decode_queue"/>
	        <Input name="Scheduler0_AvailPort" type="[1:0]" description="Number of available entries for transmit queue 0 (dedicated to CSR)"/>
	        <Input name="Scheduler1_AvailPort" type="[3:0]" description="The number of available entries of transmit queue 1"/>
	        <Input name="Scheduler2_AvailPort" type="[3:0]" description="The number of available entries of transmit queue 2"/>
	        <Input name="Insn1_excp_vaild" type="" description="Check whether an exception occurs in instruction 1"/>
	        <Input name="Insn2_excp_vaild" type="" description="Check whether an exception occurs in instruction 2"/>
	        <Input name="insn1_Function_type" type="[2:0]" description="The functional unit that instruction 1 needs to invoke"/>
	        <Input name="insn2_Function_type" type="[2:0]" description="The functional unit that instruction 2 needs to invoke"/>
	        <Input name="insn1_rd" type="[4:0]" description="destination register for instruction 1"/>
	        <Input name="insn2_rd" type="[4:0]" description="destination register for instruction 2"/>
	        <Input name="Insn1_LSQTag_in" type="[3:0]" description="insn1 pointer in LoadQueue or StoreQueue"/>
	        <Input name="insn1_PhyRs1_in" type="[5:0]" description="PhyRs1 register address of insn1"/>
	        <Input name="insn1_PhyRs2_in" type="[5:0]" description="PhyRs2 register address of insn1"/>
	        <Input name="insn1_PhyRd_in" type="[5:0]" description="PhyRd register address of insn1"/>
	        <Input name="insn1_LPhyRd_in" type="[5:0]" description="LPhyRd register address of insn1"/>
	        <Input name="Insn1_RobTag_in" type="[3:0]" description="robtag of insn1"/>
	        <Input name="Insn1_State_in" type="[3:0]" description="The state of insn1"/>
	        <Input name="Insn2_LSQTag_in" type="[3:0]" description="insn2 pointer in LoadQueue or StoreQueue"/>
	        <Input name="insn2_PhyRs1_in" type="[5:0]" description="PhyRs1 register address of insn2"/>
	        <Input name="insn2_PhyRs2_in" type="[5:0]" description="PhyRs2 register address of insn2"/>
	        <Input name="insn2_PhyRd_in" type="[5:0]" description="PhyRd register address of insn2"/>
	        <Input name="insn2_LPhyRd_in" type="[5:0]" description="LPhyRd register address of insn2"/>
	        <Input name="Insn2_RobTag_in" type="[3:0]" description="robtag of insn2"/>
	        <Input name="Insn2_State_in" type="[3:0]" description="The state of insn2"/>
	        
	        <!-- Outputs from each Functional Unit  -->
	        <Output name="Issue_num1" type="[1:0]" description="The issue number matched by instruction 1"/>
	        <Output name="insn1" type="[127:0]" description="insn entry taken from decode_queue"/>
	        <Output name="Insn1_LSQTag" type="[3:0]" description="insn1 pointer in LoadQueue or StoreQueue"/>
	        <Output name="insn1_PhyRs1" type="[5:0]" description="PhyRs1 register address of insn1"/>
	        <Output name="insn1_PhyRs2" type="[5:0]" description="PhyRs2 register address of insn1"/>
	        <Output name="insn1_PhyRd" type="[5:0]" description="PhyRd register address of insn1"/>
	        <Output name="insn1_LPhyRd" type="[5:0]" description="LPhyRd register address of insn1"/>
	        <Output name="Insn1_RobTag" type="[3:0]" description="robtag of insn1"/>
	        <Output name="Insn1_State" type="[3:0]" description="The state of insn1 set based on the module's functionality"/>
	        
	        <Output name="Issue_num2" type="[1:0]" description="The issue number matched by instruction 2"/>
	        <Output name="insn2" type="[127:0]" description="insn entry taken from decode_queue"/>
	        <Output name="Insn2_LSQTag" type="[3:0]" description="insn2 pointer in LoadQueue or StoreQueue"/>
	        <Output name="insn2_PhyRs1" type="[5:0]" description="PhyRs1 register address of insn2"/>
	        <Output name="insn2_PhyRs2" type"[5:0]" description="PhyRs2 register address of insn2"/>
	        <Output name="insn2_PhyRd" type="[5:0]" description="PhyRd register address of insn2"/>
	        <Output name="insn2_LPhyRd" type="[5:0]" description="LPhyRd register address of insn2"/>
	        <Output name="Insn2_RobTag" type="[3:0]" description="robtag of insn2"/>
	        <Output name="Insn2_State" type="[3:0]" description="The state of insn2 set based on the module's functionality"/>
	</Interface>
	<Function description="Modifications for HDL compatibility: 
    1. The original scheduler function 'schedular.scheduler->m_SupportFunc.count(insn->Fu)' is not implementable in HDL, thus it is replaced by manual configuration using parameters. The module sequentially compares the instruction type of the input instruction with the configured supported instruction types for the three issue queues. 
    2. Similarly, 'Schedule(insn, scheduler.scheduler->Allocate())' is not implementable in HDL, and is replaced by introducing two additional parameters, Issue_num1 and Issue_num2. Each issue queue matches these two data points with the incoming instructions. If there is a match, the corresponding packet is written into the queue. 
    Functional Description: 
    1. The module dispatches a specified number of instructions to the issue queue based on DispatchCount.
    2. If an instruction is exceptional, or if it is one of NOP, FENCE, or MRET instructions, then insn_State is set to the commit state.
    3. If the instruction does not meet the criteria in point 2, then insn_State is set to the Issue state. The instruction's Function_type is then sequentially matched with each ISSUE's responsible functional unit. If a match is successful, the insn is sent to the specified queue, and the matched queue number (0, 1, 2) is output, with no further matching with subsequent ISSUE queues. 
    4. If the match is unsuccessful, the queue number is set to 4.
    5. The process is then repeated for instruction 2, following steps 3 and 4."/>
<ReferenceModel code="enum funcType_t { ALU , BRU, CSR, LDU, STU};
enum InsnState_t{
    State_Fetch1, State_Fetch2, State_Decode, State_Dispatch, 
    State_Issue,State_ReadOperand,State_Execute,State_WriteBack, State_Commit, State_Done
};
void  Dispatch::DispatchInsn(InsnPkg_t&amp; insnPkg, uint64_t DispatchCount){
    for(size_t i = 0 ; i &lt; DispatchCount; i++){
        InsnPtr_t insn = insnPkg[i];
        if(  insn-&gt;Excp.valid ||
             ((insn-&gt;Fu == funcType_t::CSR) &amp;&amp; (insn-&gt;SubOp == 9)) ||
             ((insn-&gt;Fu == funcType_t::ALU) &amp;&amp; (insn-&gt;IsaRd == 0)) ||
             ((insn-&gt;Fu == funcType_t::CSR) &amp;&amp; (insn-&gt;SubOp ==7))
        ){
            insn-&gt;State = InsnState_t::State_Commit;//直接提交
        }else{
            insn-&gt;State = InsnState_t::State_Issue;
            for(auto scheduler : this-&gt;m_SchedularVec){
                if(scheduler.scheduler-&gt;m_SupportFunc.count(insn-&gt;Fu) )
                {
                    scheduler.scheduler-&gt;Schedule(insn,scheduler.scheduler-&gt;Allocate());
                    break;
                }
            } 
        }
    }
}"/>    
</Module>
<!-- Definitions for Request and Result types for each Functional Unit -->
