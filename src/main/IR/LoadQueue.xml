<Module type="LoadQueue">
    <Parameters>
        <Parameter name="load_queue_size" type="integer" value="16" description="Determines the depth of the load queue."/>
    </Parameters>
    <Interface>
        <!-- Interfaces for LoadQueue -->
        <Input name="Clk" type="signal" description="Clock signal"/>
        <Input name="Reset" type="signal" description="Reset signal, used to initialize or reset the FIFO state"/>
        <Input name="Entry_data1" type="[196:0]" description="First input data port, used for writing data for the first instruction"/>
        <Input name="Entry_data2" type="[196:0]" description="Second input data port, used for writing data for the second instruction"/>
        <Input name="LA_EN1" type="signal" description="First write enable signal, controls whether Entry_data1 is written into the FIFO"/>
        <Input name="LA_EN2" type="signal" description="Second write enable signal, controls whether Entry_data2 is written into the FIFO"/>
        <Input name="Load_Write_valid" type="signal" description="Load Queue write signal"/>
        <Input name="WB_addressReady" type="signal" description="Indicates if the address for memory data retrieval is ready"/>
        <Input name="WB_address" type="[31:0]" description="Address of the instruction’s data retrieval from memory"/>
        <Input name="WB_LSQTag" type="[3:0]" description="Index of the entry to be modified"/>
        <Input name="TryIssue_valid" type="signal" description="Signal to update the Load Queue from TryIssueLoad request"/>
        <Input name="TryIssue_state" type="[1:0]" description="Updated state of the entry"/>
        <Input name="TryIssue_ldqPtr" type="[3:0]" description="Index of the entry to be updated by TryIssueLoad"/>
        <Input name="RR_valid1" type="signal" description="Update signal request 1 from ReleaseResource module"/>
        <Input name="LSQtag1" type="[5:0]" description="Tag for the entry to be released as indicated by ReleaseResource module"/>
        <Input name="RR_valid2" type="signal" description="Update signal request 2 from ReleaseResource module"/>
        <Input name="LSQtag2" type="[5:0]" description="Tag for the entry to be released as indicated by ReleaseResource module"/>
        <Input name="Commit_vaild1" type="signal" description="Request to commit an instruction"/>
        <Input name="Commit_LSQTag1" type="[3:0]" description="Index of the entry to be set to commit state"/>
        <Input name="Commit_vaild2" type="signal" description="Request to commit an instruction"/>
        <Input name="Commit_LSQTag2" type="[3:0]" description="Index of the entry to be set to commit state"/>
        <Input name="inquire_tag" type="[3:0]" description="Tag for the entry to be queried"/>
        <Input name="D_state_valid" type="signal" description="Signal for valid state update request from ReceiveResponse"/>
        <Input name="D_excp_valid" type="signal" description="Signal for valid exception update request from ReceiveResponse"/>
        <Input name="D_LSQTag" type="[3:0]" description="Index of the entry for which the update is requested by ReceiveResponse"/>
        <Input name="D_excp_cause" type="[5:0]" description="Exception cause to be updated by ReceiveResponse"/>
        <Input name="D_excp_tval" type="[31:0]" description="Exception value to be updated by ReceiveResponse"/>
        <Output name="AvailEntryCount" type="[3:0]" description="Number of available free entries in the Load Queue"/>
        <Output name="Empty" type="signal" description="Indicates whether the queue is empty"/>
        <Output name="header" type="[3:0]" description="Index of the current front entry in the Load Queue"/>
        <Output name="FrontQueue_addressReady" type="signal" description="Indicates whether the address of the current entry is ready"/>
        <Output name="FrontQueue_Killed" type="signal" description="Indicates whether the current entry is valid"/>
        <Output name="FrontQueue_state" type="[1:0]" description="State of the current entry"/>
        <Output name="FrontQueue_address" type="[31:0]" description="Address where the current entry’s data needs to be stored"/>
        <Output name="Require_Killed" type="signal" description="Indicates whether the entry is valid"/>
        <Output name="Require_address" type="[31:0]" description="Address for loading data from memory"/>
        <Output name="Require_subop" type="[3:0]" description="Specific operation to be performed by the instruction in the execution unit"/>
        <Output name="Require_RobTag" type="[3:0]" description="Index of the instruction in the ROB"/>
        <Output name="Require_excp_valid" type="signal" description="Stores the current instruction’s exception status"/>
        <Output name="Require_excp_cause" type="[5:0]" description="Stores the type of exception for the current instruction"/>
        <Output name="Require_excp_tval" type="[31:0]" description="Stores the address for the current instruction’s exception"/>
        <Output name="Require_IsaRd" type="[4:0]" description="Address of the rd register"/>
        <Output name="Require_Function_type" type="[2:0]" description="Type of execution unit required by the instruction, such as ALU, BRU, CSR, LDU, STU"/>
        <Output name="Require_PhyRd" type="[5:0]" description="Address of the physical register Rd"/>
    </Interface>
    <Function description="This module serves as a storage for load instruction requests sent to memory, operating as a circular queue with a depth of load_queue_size and a width of 197 bits. As a circular queue, it ensures that the header, tail, or nextTail pointers wrap around to the other end of the queue when they reach the boundary, thus enabling the cyclical behavior. Furthermore, the queue is capable of updating the data within each entry on every rising edge of the clock cycle based on input signals and can output relevant data at any time through combinational logic queries. 
    The data format within an entry is as follows: Bits 196:165 excp_tval, 164:159 excp_cause, 158 excp_valid, 157:126 imm, 125:122 Sub_OP, 121:119 Function_type, 118 ControlFlowInsn, 117:113 IsaRd, 112 Operand2Ready, 111:107 IsaRs2, 106 Operand1Ready, 105:101 IsaRs1, 100:69 pc, 68:65 LSQTag, 64:61 RobTag, 60:55 PhyRs1, 54:49 PhyRs2, 48:43 PhyRd, 42:37 LPhyRd, 36:35 state, 34 commited, 33 Killed, 32 addressReady, 31:0 address.
    The operations are as follows: 
    1. When reset=0, all data stored within the entries of the queue are initialized to 0. The header, tail, usage count, and Empty flags are also set to 0, while nextTail is set to 1, indicating the next tail pointer position.
    2. On the rising edge of the clock, data is written into the queue in order if LA_EN1 and LA_EN2 are asserted. If LA_EN1=1, Entry_data1 is written into the entry pointed by the tail, and both tail and nextTail are incremented by 1. If LA_EN2=1, Entry_data2 is written into the entry pointed by the tail, and both tail and nextTail are incremented by 1 as well.
    3. On the rising edge of the clock, if Load_Write_valid=1, indicating that the LSQ_WriteBack module requests to update the Load Queue data, the corresponding entry's addressReady and address fields are updated based on the input WB_LSQTag, WB_addressReady, and WB_address, with other data remaining unchanged.
    4. On the rising edge of the clock, if TryIssue_valid=1, indicating that the TryIssueStore module requests to update the Load Queue data, the corresponding entry's state field is updated based on the input TryIssue_ldqPtr and TryIssue_state.
    5. On the rising edge of the clock, entries are marked as invalid by setting the Killed flag to 1 based on RR_valid1 and RR_valid2 inputs and the LSQtag values. If RR_valid1=1, the Killed flag for the entry pointed by LSQtag1 is set to 1. Similarly, if RR_valid2=1, the Killed flag for the entry pointed by LSQtag2 is set to 1.
    6. On the rising edge of the clock, instructions are committed if Commit_vaild1 or Commit_vaild2 are asserted. If Commit_vaild1=1, the commited flag of the entry pointed by Commit_LSQTag1 is set to 1. Similarly, if Commit_vaild2=1, the commited flag of the entry pointed by Commit_LSQTag2 is set to 1.
    7. On the rising edge of the clock, if the queue is not empty, it will determine whether to pop an entry from the queue based on the commited, Killed, and state fields of the current entry pointed by the header. If commited=1, the instruction can be committed, and the header is incremented by 1 while decreasing usage by 1. If commited=0, it checks if Killed=1 and state≠1; if both conditions are met, the entry is considered invalid, and the header is incremented by 1 while decreasing usage by 1.
    8. On the rising edge of the clock, if D_state_valid=1, the state of the entry pointed by D_LSQTag is updated to 2. If D_excp_valid=1, then excp_valid, excp_cause, and excp_tval for the entry pointed by D_LSQTag are updated with the values D_excp_valid, D_excp_cause, and D_excp_tval respectively.
    9. The outputs include AvailEntryCount=load_queue_size - usage, the current tail pointer tail, the next tail pointer nextTail, the Empty flag (which is 1 when usage=0), and the header pointer header. Also, the data stored in the entry pointed by the header, including FrontQueue_addressReady, FrontQueue_Killed, FrontQueue_state, and FrontQueue_address, are output.
    10. Based on the input require_tag, the corresponding entry is located, and internal data including Killed, address, Sub_OP, RobTag, excp_valid, excp_cause, excp_tval, Function_type, IsaRd, and PhyRd are output."/>
    <ReferenceModel code="The reference model written in C++ is not provided here but contains the functions of the module"/>
</Module>
<!-- Definitions for Request and Result types for each Functional Unit -->
