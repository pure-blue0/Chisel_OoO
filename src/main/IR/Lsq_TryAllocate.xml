<Module type="Lsq_TryAllocate">
	<Parameters>
		<!-- No parameters defined -->
	</Parameters>
	<Interface>
	        <!-- Input Ports -->
	        <Input name="insn_num" type="[2:0]" description="The number of instructions fetched from decode_queue"/>
	        <Input name="insn1_Function_type" type="[2:0]" description="The functional unit that instruction 1 needs to invoke"/>
	        <Input name="insn2_Function_type" type="[2:0]" description="The functional unit that instruction 2 needs to invoke"/>
	        <Input name="LoadQueue_unuse_count" type="[3:0]" description="The number of entries available in the LoadQueue queue"/>
	        <Input name="StoreQueue_unuse_count" type="[3:0]" description="The number of entries available in the StoreQueue queue"/>
	        <!-- Output Ports -->
	        <Output name="lsq_success_count" type="[2:0]" description="Output the lsq entry count that can be allocated"/>
	</Interface>
	<Function description="1. This module is used to get the number of entries to the load&amp;store queue that can be allocated.&#10;2. First calculate how many instructions need to use Load Unit or Store Unit based on the input insn1_Function_type and insn2_Function_type.&#10;3. Then compare the number of entries calculated in 2 with the number of entries available in load queue and store queue respectively. If the number of entries available in queue is less than the number calculated in 2, set SuccessCount equal to the number of entries available in queue. Otherwise, set SuccessCount=insn_num"/>
	<ReferenceModel code="void Lsq::TryAllocate(InsnPkg_t&amp; insnPkg, uint64_t&amp; SuccessCount){&#10;    SuccessCount = 0;&#10;    uint16_t AllocLdqCount = 0;&#10;    uint16_t AllocStqCount = 0;&#10;    for(auto&amp; insn : insnPkg){//According to the function type of insn, count how many of the two input instructions are load instructions and how many are store instructions&#10;        if(insn-&gt;Fu == funcType_t::LDU)      AllocLdqCount++;&#10;        else if(insn-&gt;Fu == funcType_t::STU) AllocStqCount++;&#10;    }&#10;    &#10;    if(this-&gt;m_LoadQueue.getAvailEntryCount()&lt;AllocLdqCount)&#10;        SuccessCount=this-&gt;m_LoadQueue.getAvailEntryCount();&#10;    else if(this-&gt;m_StoreQueue.getAvailEntryCount()&lt;AllocStqCount)&#10;        SuccessCount=this-&gt;m_StoreQueue.getAvailEntryCount();&#10;    else SuccessCount = insnPkg.size();&#10;&#10;}"/>    
</Module>
<!-- Definitions for Request and Result types for each Functional Unit -->
